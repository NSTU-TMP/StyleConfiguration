using System;using System.Collections.Generic;using System.IO;using System.Reactive;using Avalonia.Controls;using ReactiveUI;namespace StyleConfiguration.Config;public class MenuItemsParser {    private static bool IsLineCorrect(string[] splitLine) => splitLine.Length is 3 or 4;    public static List<MenuItem> Parse(string pathToFile, Dictionary<string, ReactiveCommand<string,Unit>>  commands)    {        return Parse(File.ReadAllLines(pathToFile), commands);    }        public static List<MenuItem> Parse(string[] lines, Dictionary<string, ReactiveCommand<string,Unit>> commands)    {        if (lines == null) throw new Exception("Null array");        int line_number = 0;        string? line = lines[line_number];        var splitLine = line.Split();                int counter = 0;        var rootTitles = new List<MenuItem>();        var currentTitles = rootTitles;        var previousMenuItem = new MenuItem();        while (lines.Length > line_number)        {            if (IsLineCorrect(splitLine))            {                var titleStep = Int32.Parse(splitLine[0]);                if (titleStep == counter)                 {                    currentTitles.Add(CreateMenuItem(line, commands));                    previousMenuItem =  currentTitles[^1];                }                else if (titleStep == counter + 1)                {                    counter++;                    currentTitles = new List<MenuItem>();                    currentTitles.Add(CreateMenuItem(line, commands));                    previousMenuItem.Items = currentTitles;                    previousMenuItem = currentTitles[^1];                }                else if (titleStep < counter && titleStep >= 0)                 {                    counter = titleStep;                                        currentTitles = rootTitles;                    for (int i = 0; i < titleStep; i++)                    {                        if (currentTitles is null) throw new Exception("пока что говно");                        previousMenuItem = currentTitles[^1];                        currentTitles = currentTitles[^1].Items as List<MenuItem>;                    }                    if (currentTitles is null) throw new Exception("пока что говно");                                        currentTitles.Add(CreateMenuItem(line, commands));                }                else                {                    throw new Exception("пока что говно");;                }            }            line_number++;                        if (lines.Length > line_number)            {                line = lines[line_number];                splitLine = line.Split();            }        }        return rootTitles;    }    private static MenuItem CreateMenuItem(string line, Dictionary<string, ReactiveCommand<string,Unit>>  commands)    {        var splitLine = line.Split();                return new MenuItem        {            Header = splitLine[1],            IsEnabled = splitLine[2] != "1",            IsVisible = splitLine[2] != "2",            CommandParameter = splitLine[1],            Command = commands.ContainsKey(splitLine[3]) ? commands[splitLine[3]] : null,        };    }}